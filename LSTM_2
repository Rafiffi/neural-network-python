# -*- coding: utf-8 -*-
"""
Created on Fri Feb 10 09:06:17 2023

@author: rafal
"""

#%% import
import tensorflow as tf
import pandas as pd
import numpy as np
#%%

import os

os.environ['KMP_DUPLICATE_LIB_OK']='True'
#%%
df = pd.read_csv(r'C:\Users\rafal\Desktop\phyton\LSTM\dane\df_lstm')
df = df.drop(df.columns[[0]], axis=1)
print(df.head())


#%%
df.index = pd.to_datetime(df['Data'], format='%Y.%m.%d')
df[:26]

#%%
dax = df['dax']
dax.plot()


#%% X Y  split 
def df_to_X_y(df, window_size=12):
  df_as_np = df.to_numpy()
  X = []
  y = []
  for i in range(len(df_as_np)-window_size):
    row = [[a] for a in df_as_np[i:i+window_size]]
    X.append(row)
    label = df_as_np[i+window_size]
    y.append(label)
  return np.array(X), np.array(y)


#%%
WINDOW_SIZE = 12
X1, y1 = df_to_X_y(dax, WINDOW_SIZE)
X1.shape, y1.shape

#%% test, train split 

X_train1, y_train1 = X1[:1000], y1[:1000]
X_val1, y_val1 = X1[1000:1080], y1[1000:1080]
X_test1, y_test1 = X1[1080:], y1[1080:]
X_train1.shape, y_train1.shape, X_val1.shape, y_val1.shape, X_test1.shape, y_test1.shape

#%% import - tensor keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam
#%%
model1 = Sequential()
model1.add(InputLayer((12, 1)))
model1.add(LSTM(64))
model1.add(Dense(8, 'relu'))
model1.add(Dense(1, 'linear'))

model1.summary()
#%%
cp1 = ModelCheckpoint('model1/', save_best_only=True)
model1.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate=0.0001), metrics=[RootMeanSquaredError()])
#%%
model1.fit(X_train1, y_train1, validation_data=(X_val1, y_val1), epochs=10, callbacks=[cp1])
#%%
from tensorflow.keras.models import load_model
model1 = load_model('model1/')

#%%
train_predictions = model1.predict(X_train1).flatten()
train_results = pd.DataFrame(data={'Train Predictions':train_predictions, 'Actuals':y_train1})
train_results
#%%
import matplotlib.pyplot as plt
plt.plot(train_results['Train Predictions'])
plt.plot(train_results['Actuals'])

#%%
test_predictions = model1.predict(X_test1).flatten()
test_results = pd.DataFrame(data={'Test Predictions':test_predictions, 'Actuals':y_test1})
test_results
#%%

